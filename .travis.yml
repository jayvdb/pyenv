sudo: false
language: c

# virtualenv versions:
# precise: 1.7.1.2
# trusty: 1.11.4
# precise: 12.0.6
# trusty: 13.1.0

addons:
  apt:
    # Note that it is not possible to include `virtualenv` from
    # source `debian-sid`, as pulls in many other debian-sid packages
    # which conflicts with the Ubuntu packages.
    packages:
      - python-virtualenv
      - python-pip

env:
  global:
    - VIRTUAL_ENV_BASE=~/virtualenv
    - VIRTUAL_ENV_VERSION_SPEC='<10'

matrix:
  include:
    # Plain bats
    - env: PYENV_NATIVE_EXT=
      addons: false
    - env: PYENV_NATIVE_EXT=1
      addons: false

    # CPython
    - env: TESTENV=2.7.11 DIST=precise VIRTUAL_ENV_VERSION_SPEC='<12.1'
      dist: precise

    - env: TESTENV=3.2.6 DIST=precise VIRTUAL_ENV_VERSION_SPEC='<13'
      dist: precise

#      addons:
#        apt:
#          packages:
#            - zlib1g-dev

    # PyPy
    - env: TESTENV=pypy-2.4.0,pypy-5.1.1,pypy-c-jit-latest,pypy-c-nojit-latest DIST=precise
      dist: precise

    # Anaconda/Miniconda

    - env: TESTENV=anaconda3-4.0.0,miniconda3-4.0.5 DIST=precise VIRTUAL_ENV_ADD_LIB_PATH=1
      dist: precise

    # Stackless

    - env: TESTENV=stackless-3.4.1,stackless-dev DIST=precise
      dist: precise

    # Jython
    - env: TESTENV=jython-2.7.0,jython-dev DIST=precise TRAVIS_LANG=generic
      dist: precise
      language: generic

# Failures (must all be replicated into the allow_failures section)

    # CPython
    - env: TESTENV=3.4.4 DIST=precise
      dist: precise

    # IronPython

    - env: TESTENV=ironpython-2.7.5 DIST=precise
      dist: precise
      sudo: required
      addons:
        apt:
          packages:
            - python-virtualenv
            - python-pip
            - mono-xbuild
            - mono-dmcs
            - mono-complete
    - env: TESTENV=ironpython-dev DIST=precise
      dist: precise
      sudo: required
      addons:
        apt:
          packages:
            - python-virtualenv
            - python-pip
            - mono-xbuild
            - mono-dmcs
            - mono-complete

    # Jython

    - env: TESTENV=jython-dev DIST=trusty TRAVIS_LANG=generic
      dist: trusty
      language: generic

    - env: TESTENV=jython-2.7.0 DIST=precise TRAVIS_LANG=python
      dist: precise
      language: python
    - env: TESTENV=jython-dev DIST=precise TRAVIS_LANG=python
      dist: precise
      language: python
    - env: TESTENV=jython-2.7.0 DIST=trusty TRAVIS_LANG=python
      dist: trusty
      language: python

    # Miniconda 2

    - env: TESTENV=miniconda2-4.0.5 DIST=precise
      dist: precise

    # Stackless

    - env: TESTENV=stackless-3.4.1 DIST=precise TRAVIS_LANG=generic
      dist: precise
      language: generic

    - env: TESTENV=stackless-3.4.1 DIST=precise TRAVIS_LANG=python VIRTUAL_ENV_VERSION_SPEC='<12.1' SHOULD_FAIL=1
      dist: precise
      language: python

    - env: TESTENV=stackless-3.4.1 DIST=precise TRAVIS_LANG=python VIRTUAL_ENV_VERSION_SPEC='==1.7.1.2' SHOULD_PASS=1
      dist: precise
      language: python

    - env: TESTENV=stackless-3.4.1 DIST=precise TRAVIS_LANG=generic VIRTUAL_ENV_VERSION_SPEC='==1.7.1.2' SHOULD_PASS=1
      dist: precise
      language: generic

  # Check these periodically
  excluded_successful:
    - env: TESTENV=pypy-2.4.0,pypy-5.1.1,pypy-c-jit-latest,pypy-c-nojit-latest DIST=trusty
      dist: trusty

    - env: TESTENV=jython-dev DIST=trusty TRAVIS_LANG=python
      dist: trusty
      language: python

    - env: TESTENV=jython-dev DIST=trusty TRAVIS_LANG=generic
      dist: trusty
      language: generic

  excluded_failures:
    # Same problem as 3.4.4
    - env: TESTENV=3.5.1 DIST=precise
      dist: precise

    # Dies after 35+ mins with targetpypystandalone.py killed
    - env: TESTENV=pypy-5.1.1,pypy-dev DIST=precise PYENV_RPYTHON_VERSION=pypy-5.1.1
      dist: precise
      language: python

    # ironpython-dev on trusty has build problems
    - env: TESTENV=ironpython-dev DIST=trusty
      dist: trusty
      sudo: required
      addons:
        apt:
          packages:
            - python-virtualenv
            - python-pip
            - mono-xbuild
            - mono-dmcs
            - mono-complete

    # trusty has same problem as precise; _io.so: undefined symbol: _PyCodec_LookupTextEncoding
    - env: TESTENV=miniconda2-4.0.5 DIST=trusty
      dist: trusty

    - env: TESTENV=miniconda-latest DIST=precise
      dist: precise

  allow_failures:
    - env: TESTENV=3.4.4 DIST=precise VIRTUAL_ENV_VERSION_SPEC='<13'
      dist: precise

    - env: TESTENV=ironpython-2.7.5 DIST=precise
      dist: precise
      sudo: required
      addons:
        apt:
          packages:
            - python-virtualenv
            - python-pip
            - mono-xbuild
            - mono-dmcs
            - mono-complete
    - env: TESTENV=ironpython-dev DIST=precise
      dist: precise
      sudo: required
      addons:
        apt:
          packages:
            - python-virtualenv
            - python-pip
            - mono-xbuild
            - mono-dmcs
            - mono-complete

    - env: TESTENV=jython-2.7.0 DIST=precise TRAVIS_LANG=python
      dist: precise
      language: python
    - env: TESTENV=jython-dev DIST=precise TRAVIS_LANG=python
      dist: precise
      language: python
    - env: TESTENV=jython-2.7.0 DIST=trusty TRAVIS_LANG=python
      dist: trusty
      language: python
    - env: TESTENV=jython-dev DIST=trusty TRAVIS_LANG=python
      dist: trusty
      language: python

    - env: TESTENV=miniconda2-4.0.5 DIST=precise
      dist: precise

before_install:
  - virtualenv --version || true
  - if [[ "$VIRTUAL_ENV" == '' ]]; then
      export PIP_USER_FLAG=--user ;
    else
      export PIP_USER_FLAG= ;
    fi

install:
  - git clone --depth 1 https://github.com/sstephenson/bats.git
  - |
    if [[ "${TESTENV%-*}" == 'ironpython' ]]; then
      echo "binfmt_misc /proc/sys/fs/binfmt_misc binfmt_misc none" | sudo tee -a /etc/fstab
      echo ':CLR:M::MZ::/usr/bin/mono:' | sudo tee /proc/sys/fs/binfmt_misc/register
    fi

script:
  - if [[ "$TESTENV" == '' ]]; then make test; fi
  - |
    export PYENV_ROOT=.
    pip install $PIP_USER_FLAG --upgrade 'virtualenv'"$VIRTUAL_ENV_VERSION_SPEC"
    for PYENV_VERSION in ${TESTENV//,/ }; do
      ./bin/pyenv install "$PYENV_VERSION"
      if [[ -x ./versions/$PYENV_VERSION/bin/python ]]; then
        ldd ./versions/$PYENV_VERSION/bin/python
        ./versions/$PYENV_VERSION/bin/python --version
        ls -al ./versions/$PYENV_VERSION/lib || true
        if [[ "$VIRTUAL_ENV_ADD_LIB_PATH" == '1' ]]; then
          export LD_LIBRARY_PATH="./versions/$PYENV_VERSION/lib/"
        fi
        virtualenv --python=./versions/$PYENV_VERSION/bin/python "$VIRTUAL_ENV_BASE/$PYENV_VERSION"
      fi
      if [[ -f "$VIRTUAL_ENV_BASE/$PYENV_VERSION/bin/activate" ]]; then
        source "$VIRTUAL_ENV_BASE/$PYENV_VERSION/bin/activate"
        python --version
        pip --version
      else
        exit 1
      fi
    done
